(define (expand-mcase subject-exp clauses)
  (let ((subject (gensym)))

    (define (expand-clause clause else-exp)
      (let ((pattern (car clause))
            (then-exp `(begin . ,(cdr clause)))
            (fail (gensym)))
        `(let ((,fail (lambda () ,else-exp)))
           ,(expand-pattern pattern then-exp `(,fail)))))

    (define (expand-pattern pattern then-exp else-exp)
      (mcase pattern
        ('_ then-exp)
        (('quote datum)
         `(if (eqv? ,subject ',datum) ,then-exp ,else-exp))
        ((: name symbol?)
         `(let ((,name ,subject)) ,then-exp))
        ((': name predicate)
         `(if (,predicate ,subject)
              (let ((,name ,subject)) ,then-exp)
              ,else-exp))
        ((car-pat . cdr-pat)
         `(if (pair? ,subject)
              (mcase (car ,subject)
                (,car-pat (mcase (cdr ,subject)
                            (,cdr-pat ,then-exp)
                            (_ ,else-exp)))
                (_ ,else-exp))
              ,else-exp))
        (literal
         `(if (eqv? ,subject ',literal) ,then-exp ,else-exp))))

    `(let ((,subject ,subject-exp))
       ,(foldr expand-clause '(%match-error) clauses))))
